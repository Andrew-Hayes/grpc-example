// Code generated by protoc-gen-go. DO NOT EDIT.
// source: boxes.proto

/*
Package boxes is a generated protocol buffer package.

It is generated from these files:
	boxes.proto

It has these top-level messages:
	Order
	Delivery
	Spec
	Box
	BoolValue
	Empty
*/
package boxes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Order struct {
	OrderNumber int32 `protobuf:"varint,1,opt,name=orderNumber" json:"orderNumber,omitempty"`
	Spec        *Spec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Order) GetOrderNumber() int32 {
	if m != nil {
		return m.OrderNumber
	}
	return 0
}

func (m *Order) GetSpec() *Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type Delivery struct {
	OrderNumber int32 `protobuf:"varint,1,opt,name=orderNumber" json:"orderNumber,omitempty"`
	Box         *Box  `protobuf:"bytes,2,opt,name=box" json:"box,omitempty"`
}

func (m *Delivery) Reset()                    { *m = Delivery{} }
func (m *Delivery) String() string            { return proto.CompactTextString(m) }
func (*Delivery) ProtoMessage()               {}
func (*Delivery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Delivery) GetOrderNumber() int32 {
	if m != nil {
		return m.OrderNumber
	}
	return 0
}

func (m *Delivery) GetBox() *Box {
	if m != nil {
		return m.Box
	}
	return nil
}

type Spec struct {
	Height int32 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Width  int32 `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
	Depth  int32 `protobuf:"varint,3,opt,name=depth" json:"depth,omitempty"`
}

func (m *Spec) Reset()                    { *m = Spec{} }
func (m *Spec) String() string            { return proto.CompactTextString(m) }
func (*Spec) ProtoMessage()               {}
func (*Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Spec) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Spec) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Spec) GetDepth() int32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

type Box struct {
	Volume int32 `protobuf:"varint,2,opt,name=volume" json:"volume,omitempty"`
}

func (m *Box) Reset()                    { *m = Box{} }
func (m *Box) String() string            { return proto.CompactTextString(m) }
func (*Box) ProtoMessage()               {}
func (*Box) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Box) GetVolume() int32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

type BoolValue struct {
	// The bool value.
	Value bool `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *BoolValue) Reset()                    { *m = BoolValue{} }
func (m *BoolValue) String() string            { return proto.CompactTextString(m) }
func (*BoolValue) ProtoMessage()               {}
func (*BoolValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BoolValue) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*Order)(nil), "Order")
	proto.RegisterType((*Delivery)(nil), "Delivery")
	proto.RegisterType((*Spec)(nil), "Spec")
	proto.RegisterType((*Box)(nil), "Box")
	proto.RegisterType((*BoolValue)(nil), "BoolValue")
	proto.RegisterType((*Empty)(nil), "Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BoxFactory service

type BoxFactoryClient interface {
	CheckOpen(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolValue, error)
	MakeBox(ctx context.Context, in *Spec, opts ...grpc.CallOption) (*Box, error)
}

type boxFactoryClient struct {
	cc *grpc.ClientConn
}

func NewBoxFactoryClient(cc *grpc.ClientConn) BoxFactoryClient {
	return &boxFactoryClient{cc}
}

func (c *boxFactoryClient) CheckOpen(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolValue, error) {
	out := new(BoolValue)
	err := grpc.Invoke(ctx, "/BoxFactory/CheckOpen", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxFactoryClient) MakeBox(ctx context.Context, in *Spec, opts ...grpc.CallOption) (*Box, error) {
	out := new(Box)
	err := grpc.Invoke(ctx, "/BoxFactory/MakeBox", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BoxFactory service

type BoxFactoryServer interface {
	CheckOpen(context.Context, *Empty) (*BoolValue, error)
	MakeBox(context.Context, *Spec) (*Box, error)
}

func RegisterBoxFactoryServer(s *grpc.Server, srv BoxFactoryServer) {
	s.RegisterService(&_BoxFactory_serviceDesc, srv)
}

func _BoxFactory_CheckOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxFactoryServer).CheckOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BoxFactory/CheckOpen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxFactoryServer).CheckOpen(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxFactory_MakeBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Spec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxFactoryServer).MakeBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BoxFactory/MakeBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxFactoryServer).MakeBox(ctx, req.(*Spec))
	}
	return interceptor(ctx, in, info, handler)
}

var _BoxFactory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BoxFactory",
	HandlerType: (*BoxFactoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckOpen",
			Handler:    _BoxFactory_CheckOpen_Handler,
		},
		{
			MethodName: "MakeBox",
			Handler:    _BoxFactory_MakeBox_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "boxes.proto",
}

// Client API for StoreFront service

type StoreFrontClient interface {
	CheckOnline(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolValue, error)
	PlaceOrder(ctx context.Context, opts ...grpc.CallOption) (StoreFront_PlaceOrderClient, error)
}

type storeFrontClient struct {
	cc *grpc.ClientConn
}

func NewStoreFrontClient(cc *grpc.ClientConn) StoreFrontClient {
	return &storeFrontClient{cc}
}

func (c *storeFrontClient) CheckOnline(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolValue, error) {
	out := new(BoolValue)
	err := grpc.Invoke(ctx, "/StoreFront/CheckOnline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeFrontClient) PlaceOrder(ctx context.Context, opts ...grpc.CallOption) (StoreFront_PlaceOrderClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StoreFront_serviceDesc.Streams[0], c.cc, "/StoreFront/PlaceOrder", opts...)
	if err != nil {
		return nil, err
	}
	x := &storeFrontPlaceOrderClient{stream}
	return x, nil
}

type StoreFront_PlaceOrderClient interface {
	Send(*Order) error
	Recv() (*Delivery, error)
	grpc.ClientStream
}

type storeFrontPlaceOrderClient struct {
	grpc.ClientStream
}

func (x *storeFrontPlaceOrderClient) Send(m *Order) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storeFrontPlaceOrderClient) Recv() (*Delivery, error) {
	m := new(Delivery)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for StoreFront service

type StoreFrontServer interface {
	CheckOnline(context.Context, *Empty) (*BoolValue, error)
	PlaceOrder(StoreFront_PlaceOrderServer) error
}

func RegisterStoreFrontServer(s *grpc.Server, srv StoreFrontServer) {
	s.RegisterService(&_StoreFront_serviceDesc, srv)
}

func _StoreFront_CheckOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreFrontServer).CheckOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StoreFront/CheckOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreFrontServer).CheckOnline(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreFront_PlaceOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StoreFrontServer).PlaceOrder(&storeFrontPlaceOrderServer{stream})
}

type StoreFront_PlaceOrderServer interface {
	Send(*Delivery) error
	Recv() (*Order, error)
	grpc.ServerStream
}

type storeFrontPlaceOrderServer struct {
	grpc.ServerStream
}

func (x *storeFrontPlaceOrderServer) Send(m *Delivery) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storeFrontPlaceOrderServer) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StoreFront_serviceDesc = grpc.ServiceDesc{
	ServiceName: "StoreFront",
	HandlerType: (*StoreFrontServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckOnline",
			Handler:    _StoreFront_CheckOnline_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PlaceOrder",
			Handler:       _StoreFront_PlaceOrder_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "boxes.proto",
}

func init() { proto.RegisterFile("boxes.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x6e, 0xda, 0x40,
	0x10, 0x86, 0x31, 0x60, 0x03, 0xe3, 0x43, 0xd5, 0x55, 0x45, 0x5d, 0xab, 0x95, 0x60, 0xa5, 0x4a,
	0x9c, 0xec, 0x96, 0xde, 0x7a, 0x74, 0x08, 0x52, 0x22, 0x25, 0x44, 0x46, 0xca, 0xdd, 0x36, 0x23,
	0x6c, 0x61, 0x3c, 0xd6, 0xb2, 0x38, 0xe6, 0x9a, 0x57, 0xc8, 0xa3, 0xe5, 0x15, 0xf2, 0x20, 0xd1,
	0xae, 0x9d, 0x88, 0x43, 0x0e, 0x39, 0xed, 0xfc, 0xff, 0xce, 0x7c, 0xa3, 0xdd, 0x1f, 0xec, 0x98,
	0x6a, 0x3c, 0x78, 0xa5, 0x20, 0x49, 0xee, 0xcf, 0x2d, 0xd1, 0x36, 0x47, 0x3f, 0x2a, 0x33, 0x3f,
	0x2a, 0x0a, 0x92, 0x91, 0xcc, 0xa8, 0x68, 0x6f, 0xf9, 0x02, 0xcc, 0x95, 0xd8, 0xa0, 0x60, 0x13,
	0xb0, 0x49, 0x15, 0xb7, 0xc7, 0x7d, 0x8c, 0xc2, 0x31, 0x26, 0xc6, 0xcc, 0x0c, 0xcf, 0x2d, 0xf6,
	0x03, 0xfa, 0x87, 0x12, 0x13, 0xa7, 0x3b, 0x31, 0x66, 0xf6, 0xdc, 0xf4, 0xd6, 0x25, 0x26, 0xa1,
	0xb6, 0xf8, 0x02, 0x86, 0x0b, 0xcc, 0xb3, 0x0a, 0xc5, 0xe9, 0x13, 0xa0, 0x31, 0xf4, 0x62, 0xaa,
	0x5b, 0x4e, 0xdf, 0x0b, 0xa8, 0x0e, 0x95, 0xc1, 0xaf, 0xa1, 0xaf, 0x98, 0x6c, 0x0c, 0x56, 0x8a,
	0xd9, 0x36, 0x95, 0xed, 0x70, 0xab, 0xd8, 0x37, 0x30, 0x1f, 0xb2, 0x8d, 0x4c, 0xf5, 0xa4, 0x19,
	0x36, 0x42, 0xb9, 0x1b, 0x2c, 0x65, 0xea, 0xf4, 0x1a, 0x57, 0x0b, 0xfe, 0x0b, 0x7a, 0x01, 0xd5,
	0x0a, 0x55, 0x51, 0x7e, 0xdc, 0x63, 0x3b, 0xd3, 0x2a, 0x3e, 0x85, 0x51, 0x40, 0x94, 0xdf, 0x47,
	0xf9, 0x11, 0x15, 0xa1, 0x52, 0x85, 0x5e, 0x37, 0x0c, 0x1b, 0xc1, 0x07, 0x60, 0x5e, 0xee, 0x4b,
	0x79, 0x9a, 0x5f, 0x01, 0x04, 0x54, 0x2f, 0xa3, 0x44, 0x92, 0x38, 0xb1, 0x29, 0x8c, 0x2e, 0x52,
	0x4c, 0x76, 0xab, 0x12, 0x0b, 0x66, 0x79, 0xba, 0xc5, 0x05, 0xef, 0x9d, 0xc6, 0x3b, 0xcc, 0x81,
	0xc1, 0x4d, 0xb4, 0x43, 0xb5, 0xbf, 0xf9, 0x25, 0x57, 0x3f, 0x92, 0x77, 0xe6, 0x04, 0xb0, 0x96,
	0x24, 0x70, 0x29, 0xa8, 0x90, 0xec, 0x3f, 0xd8, 0x0d, 0xaa, 0xc8, 0xb3, 0x02, 0x3f, 0x84, 0x7d,
	0x7f, 0x7c, 0x7e, 0x79, 0xea, 0x7e, 0x65, 0x5f, 0xfc, 0xea, 0xaf, 0x7f, 0xde, 0xfc, 0x1b, 0xe0,
	0x2e, 0x8f, 0x12, 0x6c, 0xc2, 0xb3, 0x3c, 0x7d, 0xba, 0x23, 0xef, 0x2d, 0x06, 0xde, 0x99, 0x19,
	0x7f, 0x8c, 0xd8, 0xd2, 0x29, 0xff, 0x7b, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x94, 0x4c, 0x38, 0x9d,
	0x12, 0x02, 0x00, 0x00,
}
